#!/usr/bin/env python3
import urllib.request
import urllib.error
import json
import time
import sys

BASE_URL = "http://localhost:8080"

def make_request(method, endpoint, data=None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    url = f"{BASE_URL}{endpoint}"
    
    if data:
        data = json.dumps(data).encode('utf-8')
    
    req = urllib.request.Request(
        url,
        data=data,
        method=method,
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            return response.getcode(), response.read().decode('utf-8')
    except urllib.error.HTTPError as e:
        return e.code, e.read().decode('utf-8')
    except Exception as e:
        return None, str(e)

def test_service_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞...")
    status, body = make_request("GET", "/tasks/nonexistent")
    
    if status in [200, 404]:
        print("‚úÖ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç")
        return True
    else:
        print(f"‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {status} - {body}")
        return False

def test_create_task():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    print("\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏...")
    
    test_urls = ["https://httpbin.org/robots.txt"]
    
    status, body = make_request("POST", "/tasks", {"urls": test_urls})
    
    if status == 201:
        data = json.loads(body)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: ID={data['id']}")
        return data['id']
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {status} - {body}")
        return None

def test_get_task_status(task_id):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
    print(f"\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id}...")
    
    status, body = make_request("GET", f"/tasks/{task_id}")
    
    if status == 200:
        data = json.loads(body)
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {data['status']}")
        return data
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {status} - {body}")
        return None

def test_invalid_urls():
    """–¢–µ—Å—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö URL"""
    print("\nüö´ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é URL...")
    
    invalid_urls = ["not-a-url", "ftp://example.com/file.txt"]
    
    status, body = make_request("POST", "/tasks", {"urls": invalid_urls})
    
    if status == 400:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è URL —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
    else:
        print(f"‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞ 400, –ø–æ–ª—É—á–∏–ª–∏: {status}")
        return False

def monitor_task_progress(task_id, timeout=30):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–¥–∞—á–∏"""
    print(f"\nüîÑ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ (—Ç–∞–π–º–∞—É—Ç: {timeout}—Å–µ–∫)...")
    
    for i in range(timeout):
        status, body = make_request("GET", f"/tasks/{task_id}")
        
        if status == 200:
            data = json.loads(body)
            current_status = data['status']
            print(f"  [{i+1}/{timeout}] –°—Ç–∞—Ç—É—Å: {current_status}")
            
            if current_status == "completed":
                print("‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
                if 'results' in data:
                    for result in data['results']:
                        success = "‚úÖ" if result.get('success') else "‚ùå"
                        print(f"   {success} {result['url']} - {result.get('bytes_read', 0)} bytes")
                return True
            elif current_status == "failed":
                print("‚ùå –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                if 'results' in data:
                    for result in data['results']:
                        if 'error' in result:
                            print(f"   –û—à–∏–±–∫–∞: {result['error']}")
                return False
        
        time.sleep(1)
    
    print(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Download Service...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if not test_service_health():
        print("\nüí° –°–æ–≤–µ—Ç: –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: go run cmd/server/main.go")
        sys.exit(1)
    
    # –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not test_invalid_urls():
        sys.exit(1)
    
    # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    task_id = test_create_task()
    if not task_id:
        sys.exit(1)
    
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞—Ä—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
    time.sleep(2)
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    task_data = test_get_task_status(task_id)
    if not task_data:
        sys.exit(1)
    
    # –¢–µ—Å—Ç 5: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    if monitor_task_progress(task_id):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è  –ó–∞–¥–∞—á–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ, –Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")

if __name__ == "__main__":
    main()