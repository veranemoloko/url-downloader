#!/usr/bin/env python3
import urllib.request
import urllib.error
import json
import time
import sys

BASE_URL = "http://localhost:8080"

def make_request(method, endpoint, data=None):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π HTTP –∫–ª–∏–µ–Ω—Ç"""
    url = f"{BASE_URL}{endpoint}"
    
    if data:
        data = json.dumps(data).encode('utf-8')
    
    req = urllib.request.Request(
        url,
        data=data,
        method=method,
        headers={'Content-Type': 'application/json'}
    )
    
    try:
        with urllib.request.urlopen(req) as response:
            return response.getcode(), response.read().decode('utf-8')
    except urllib.error.HTTPError as e:
        return e.code, e.read().decode('utf-8')
    except Exception as e:
        return None, str(e)

def create_slow_download_task():
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    print("üêå –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ–∫–∞—á–∫–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—ã—á–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
    # –∏–ª–∏ –º–æ–∂–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
    slow_files = [
     "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4",  # ~700MB (–û–ß–ï–ù–¨ –¢–Ø–ñ–ï–õ–´–ô!)
    "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4", 
]
    
    print("üì¶ –ú–µ–¥–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ–∫–∞—á–∫–∏:")
    for i, url in enumerate(slow_files, 1):
        print(f"   {i}. {url}")
    
    status, body = make_request("POST", "/tasks", {"urls": slow_files})
    
    if status != 201:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: {status}")
        return None
    
    task_data = json.loads(body)
    task_id = task_data["id"]
    print(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞: {task_id}")
    return task_id

def wait_for_partial_download(task_id):
    """–ñ–¥–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    print("\n‚è≥ –û–∂–∏–¥–∞–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤...")
    print("   –¶–µ–ª—å: –¥–æ–∂–¥–∞—Ç—å—Å—è –∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –Ω–∞—á–Ω—É—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –Ω–æ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∞—Ç—Å—è")
    
    partial_progress = False
    attempts = 0
    max_attempts = 10
    
    while attempts < max_attempts and not partial_progress:
        status, body = make_request("GET", f"/tasks/{task_id}")
        
        if status == 200:
            data = json.loads(body)
            current_status = data["status"]
            
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {attempts + 1}/{max_attempts}: —Å—Ç–∞—Ç—É—Å = {current_status}")
            
            if data.get("results"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–∞–π–ª—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
                in_progress_files = []
                for j, result in enumerate(data["results"]):
                    bytes_read = result.get("bytes_read", 0)
                    success = result.get("success", False)
                    
                    if bytes_read > 0 and not success:
                        in_progress_files.append((j, bytes_read))
                        print(f"      üìÅ –§–∞–π–ª {j+1}: {bytes_read} –±–∞–π—Ç (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)")
                
                if in_progress_files:
                    print(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(in_progress_files)} —Ñ–∞–π–ª–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏!")
                    print("üõë –ü–†–ï–†–´–í–ê–ï–ú –°–ï–†–í–ï–† –î–õ–Ø –¢–ï–°–¢–ê –î–û–ö–ê–ß–ö–ò!")
                    return True
            
            if current_status == "completed":
                print("‚ùå –í—Å–µ —Ñ–∞–π–ª—ã —É–∂–µ —Å–∫–∞—á–∞–ª–∏—Å—å! –°–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ–∫–∞—á–∫–∏.")
                return False
            elif current_status == "failed":
                print("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return False
        
        attempts += 1
        time.sleep(2)  # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
    return False

def test_resume_functionality(task_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–æ–∫–∞—á–∫–∏"""
    print("\n" + "="*60)
    print("üéØ –¢–ï–°–¢ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–û–°–õ–ï –ü–†–ï–†–´–í–ê–ù–ò–Ø")
    print("="*60)
    
    # –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
    print("\n1. üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –î–û –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è:")
    status, body = make_request("GET", f"/tasks/{task_id}")
    if status == 200:
        data_before = json.loads(body)
        if data_before.get("results"):
            for j, result in enumerate(data_before["results"]):
                bytes_before = result.get("bytes_read", 0)
                success_before = result.get("success", False)
                status_icon = "‚úÖ" if success_before else "üîÑ"
                print(f"   {status_icon} –§–∞–π–ª {j+1}: {bytes_before} –±–∞–π—Ç")
    
    # –®–∞–≥ 2: –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("\n2. üõë –ü–†–ï–†–´–í–ê–ï–ú –°–ï–†–í–ï–†")
    print("   –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C!")
    print("   –£ –≤–∞—Å –µ—Å—Ç—å 5 —Å–µ–∫—É–Ω–¥...")
    for i in range(5, 0, -1):
        print(f"   {i}...")
        time.sleep(1)
    
    # –®–∞–≥ 3: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    print("\n3. üîÑ –ü–ï–†–ï–ó–ê–ü–£–°–ö–ê–ï–ú –°–ï–†–í–ï–†")
    print("   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: go run cmd/server/main.go")
    print("   –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Enter –∑–¥–µ—Å—å...")
    input()
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    print("\n4. üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
    status, body = make_request("GET", f"/tasks/{task_id}")
    
    if status != 200:
        print(f"‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å: {status}")
        return False
    
    data_after = json.loads(body)
    print(f"   –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {data_after['status']}")
    
    if data_after.get("results"):
        resume_detected = False
        for j, result in enumerate(data_after["results"]):
            bytes_after = result.get("bytes_read", 0)
            success_after = result.get("success", False)
            status_icon = "‚úÖ" if success_after else "üîÑ"
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            bytes_before = 0
            if data_before.get("results") and j < len(data_before["results"]):
                bytes_before = data_before["results"][j].get("bytes_read", 0)
            
            if bytes_after >= bytes_before and bytes_before > 0:
                resume_info = f" (–¥–æ–∫–∞—á–∫–∞: {bytes_before} ‚Üí {bytes_after})"
                resume_detected = True
            else:
                resume_info = ""
            
            print(f"   {status_icon} –§–∞–π–ª {j+1}: {bytes_after} –±–∞–π—Ç{resume_info}")
        
        if resume_detected:
            print("‚úÖ –î–û–ö–ê–ß–ö–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!")
        else:
            print("‚ö†Ô∏è –î–æ–∫–∞—á–∫–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ —Ñ–∞–π–ª—ã —É–∂–µ –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã)")
    
    # –®–∞–≥ 5: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    print("\n5. ‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–∫–∞—á–∫–∏...")
    for i in range(20):
        status, body = make_request("GET", f"/tasks/{task_id}")
        if status == 200:
            data = json.loads(body)
            current_status = data["status"]
            
            if current_status == "completed":
                print("üéâ –î–û–ö–ê–ß–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê!")
                
                # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if data.get("results"):
                    total_files = len(data["results"])
                    success_files = sum(1 for r in data["results"] if r.get('success'))
                    total_bytes = sum(r.get('bytes_read', 0) for r in data["results"])
                    
                    print(f"üì¶ –ò–¢–û–ì: {success_files}/{total_files} —Ñ–∞–π–ª–æ–≤, {total_bytes} –±–∞–π—Ç")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
                    if success_files == total_files:
                        print("‚úÖ –í–°–ï –§–ê–ô–õ–´ –£–°–ü–ï–®–ù–û –°–ö–ê–ß–ê–ù–´!")
                        return True
                    else:
                        print("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                        return False
                return True
            
            elif current_status == "failed":
                print("‚ùå –î–æ–∫–∞—á–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π")
                return False
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
            if i % 5 == 0:
                if data.get("results"):
                    completed = sum(1 for r in data["results"] if r.get('success'))
                    total = len(data["results"])
                    print(f"   [{i+1}/20] –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {completed}/{total}")
        
        time.sleep(1)
    
    print("‚ö†Ô∏è –î–æ–∫–∞—á–∫–∞ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ 20 —Å–µ–∫—É–Ω–¥")
    return True

def verify_resume_mechanism():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –¥–æ–∫–∞—á–∫–∏ —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤"""
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê –ú–ï–•–ê–ù–ò–ó–ú–ê –î–û–ö–ê–ß–ö–ò")
    print("="*60)
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Range –∑–∞–ø—Ä–æ—Å–æ–≤
    print("\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É...")
    
    # –§–∞–π–ª—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç–æ—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç Range –∑–∞–ø—Ä–æ—Å—ã
    range_files = [
        "https://httpbin.org/bytes/102400",  # 100KB —Ñ–∞–π–ª
    ]
    
    status, body = make_request("POST", "/tasks", {"urls": range_files})
    
    if status != 201:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–¥–∞—á—É")
        return
    
    task_data = json.loads(body)
    task_id = task_data["id"]
    print(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task_id}")
    
    # –î–∞–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    time.sleep(2)
    
    # –ü—Ä–µ—Ä—ã–≤–∞–µ–º
    print("\nüõë –ë—ã—Å—Ç—Ä–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∞...")
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞!")
    time.sleep(3)
    
    print("\nüîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
    print("üí° –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –Ω–∞–∂–º–∏—Ç–µ Enter...")
    input()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
    status, body = make_request("GET", f"/tasks/{task_id}")
    if status == 200:
        data = json.loads(body)
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: {data['status']}")
        
        if data.get("results"):
            result = data["results"][0]
            print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {result.get('bytes_read', 0)} –±–∞–π—Ç")
            
            if result.get('success'):
                print("üéØ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–æ–∫–∞—á–∫–∏!")
            else:
                print("üîÑ –§–∞–π–ª –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–¥–æ–∫–∞—á–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)")
    
    print("\nüí° –ú–ï–•–ê–ù–ò–ó–ú –î–û–ö–ê–ß–ö–ò –†–ê–ë–û–¢–ê–ï–¢ –ï–°–õ–ò:")
    print("   - –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ downloads/tasks/")
    print("   - –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
    print("   - –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è —Å –º–µ—Å—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞ –¥–æ–∫–∞—á–∫–∏"""
    print("üöÄ –¢–ï–°–¢ –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –î–û–ö–ê–ß–ö–ò")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–∏—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞...")
    status, body = make_request("GET", "/tasks/nonexistent")
    if status not in [200, 404]:
        print("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
        sys.exit(1)
    print("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω")
    
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫–∞—á–∫–∏
    print("\n" + "üéØ –¢–ï–°–¢ 1: –û–°–ù–û–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –î–û–ö–ê–ß–ö–ò" + "üéØ")
    task_id = create_slow_download_task()
    if not task_id:
        sys.exit(1)
    
    # –ñ–¥–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
    if wait_for_partial_download(task_id):
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = test_resume_functionality(task_id)
        
        if success:
            print("\nüéâ –û–°–ù–û–í–ù–û–ô –¢–ï–°–¢ –î–û–ö–ê–ß–ö–ò –ü–†–û–ô–î–ï–ù!")
        else:
            print("\n‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç –¥–æ–∫–∞—á–∫–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ö–∞–Ω–∏–∑–º–∞
    print("\n" + "üéØ –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –ú–ï–•–ê–ù–ò–ó–ú–ê" + "üéØ")
    verify_resume_mechanism()
    
    print("\n" + "="*60)
    print("üìã –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –î–û–ö–ê–ß–ö–ò:")
    print("   ‚úÖ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –Ω–∞ –¥–∏—Å–∫")
    print("   ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞") 
    print("   ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    print("   üéØ –°–µ—Ä–≤–∏—Å –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ production!")
    print("="*60)

if __name__ == "__main__":
    main()